// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String               @id @default(uuid())
  email       String               @unique
  password    String
  name        String
  role        UserRole             @default(CUSTOMER)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  cart        Cart?
  products    Product[]            @relation("ProductCreator")
  resetTokens PasswordResetToken[]
  orders      Order[]
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String
  price          Float
  image          String
  totalStock     Int
  availableStock Int
  reservedStock  Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  admin          User     @relation("ProductCreator", fields: [adminId], references: [id])
  adminId        String

  cartItems  CartItem[]
  OrderItems OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  addedAt   DateTime @default(now())
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
